import itertools

characters = 'ABCDEFGHI'
numbers = '123456789'

# These two global variables will be used to permutate and index the game board
# Example: A1, A2, A3,..,B1,B2,B3,...

# Sudoku Class
# Creates an 9x9 board of 81 tiles
class Sudoku:

    def __init__(self, new_board):
        self.variables = list()
        self.domain = dict()
        self.constraints = list()
        self.neighbours = dict()
        self.updated = dict()
        self.initGame(new_board)
    
    def initGame(self, new_board):
        self.create_variables(numbers, characters)
        self.populate_domain(new_board)
        self.create_constraints()
        self.create_neighbours()
    
    def populate_domain(self, new_board):
        square_count = 0
        Position_Letter = 0
        letter = characters[0]
        for x in new_board:
            if (x == 1):
                self.domain[letter + str((square_count % 9) + 1)] = [1, 2, 3, 4, 5, 6, 7, 8, 9]
            else:
                self.domain[letter + str((square_count % 9) + 1)] = [x]
            self.updated[letter + str((square_count % 9) + 1)] = list()

        square_count += 1
        if (square_count % 9) == 0:
            if Position_Letter < 8:
                Position_Letter += 1
                letter = characters[Position_Letter]

        # Output:
    # A1: [1, 2, 3, 4, 5, 6, 7, 8, 9],
    # A2: [1, 2, 3, 4, 5, 6, 7, 8, 9],
    # A3: [3],
    # A4: [1, 2, 3, 4, 5, 6, 7, 8, 9],
    # A5: [2],
    # A6: [1, 2, 3, 4, 5, 6, 7, 8, 9],
    # A7: [6]

    def create_variables(self, numbers, characters):
        for char in characters:
            for num in numbers:
                self.variables.append(char+num)
    
        # Returns
    # ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9',
    # 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 
    # 'C1', 'C2', 'C3','C4', 'C5', 'C6', 'C7', 'C8', 'C9', 
    # 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 
    # 'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9', 
    # 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 
    # 'G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7', 'G8', 'G9', 
    # 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 
    # 'I1', 'I2', 'I3', 'I4', 'I5', 'I6', 'I7', 'I8', 'I9']

    def create_constraints(self):
        rows = list()
        columns = list()
        blocks = list()
        groups = list()

        #create row constraints
        for character in characters:
            tmp = list()
            for number in numbers:
                tmp.append(character + number)
            rows.append

        #create columns constraints
        for character in characters:
            tmp = list()
            for number in numbers:
                tmp.append(character + number)
            columns.append
        
        #create blocks constraints
        for character in ['ABC', 'DEF', 'GHI']:
            for number in ['123', '456', '789']:
                tmp = list()
                for letter in character:
                    for digit in number:
                        tmp.append(letter + digit)
                blocks.append
        
        #Changed from append
        groups += columns
        groups += rows
        groups += blocks
        
        # Need to permutate each row, column, and block to induce a constraint list of its neighbours
        for blocks in groups:
            permutations = list()
            for pair in itertools.permutations(blocks, 2):
                permutations.append(pair)
            for pair in permutations:
                if [pair[0], pair[1]] not in self.constraints:
                    self.constraints.append([pair[0], pair[1]])

    def create_neighbours(self):
        # loop through all tiles in sudoku
        for variables in self.variables:
            # create a empty list of neighbours for each tile
            self.neighbours[variables] = list()
            # loop through constraints generated by create_constraints
            for constraints in self.constraints:
                # if the variable ex.A1 has constraint of A2
                if variables == constraints[0]:
                    self.neighbours[variables].append(constraints[1])
        # testing for neighbours

    def print_sudoku(self):
        count = 0
        for variable in self.variables:
            count += 1
            if count == 9:
                count = 0
                print()
            print(self.domain(variable))
"""     if __name__ == "__main__":
        print_sudoku()
        print("Everything passed") """
